// Generated by CoffeeScript 1.6.3
/**
 * An implementation of Google Maps' MVCObject
*/


(function() {
  var MVCObject,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  MVCObject = (function() {
    var capitalize, getGetterName, getSetterName, getUid, getterNameCache, setterNameCache, triggerChange, uid;

    function MVCObject() {}

    getterNameCache = {};

    setterNameCache = {};

    uid = 0;

    getGetterName = function(key) {
      if (getterNameCache.hasOwnProperty(key)) {
        return getterNameCache[key];
      } else {
        return getterNameCache[key] = "get" + (capitalize(key));
      }
    };

    getSetterName = function(key) {
      if (setterNameCache.hasOwnProperty(key)) {
        return setterNameCache[key];
      } else {
        return setterNameCache[key] = "set" + (capitalize(key));
      }
    };

    capitalize = function(str) {
      return str.substr(0, 1).toUpperCase() + str.substr(1);
    };

    getUid = function(obj) {
      return obj.__uid__ || (obj.__uid__ = ++uid);
    };

    triggerChange = function(target, targetKey) {
      var bindingName, bindingObj, evt, handler, _base, _i, _len, _ref, _ref1, _results;
      evt = "" + targetKey + "_changed";
      if (target[evt]) {
        target[evt]();
      } else {
        if (typeof target.changed === "function") {
          target.changed(targetKey);
        }
      }
      if (target.__events__) {
        if (target.__events__[evt]) {
          _ref = target.__events__[evt];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            handler = _ref[_i];
            handler.call(target);
          }
        }
      }
      target.__bindings__ || (target.__bindings__ = {});
      (_base = target.__bindings__)[targetKey] || (_base[targetKey] = {});
      _ref1 = target.__bindings__[targetKey];
      _results = [];
      for (bindingName in _ref1) {
        bindingObj = _ref1[bindingName];
        _results.push(triggerChange(bindingObj.target, bindingObj.targetKey));
      }
      return _results;
    };

    MVCObject.prototype.get = function(key) {
      var accessor, getterName, target, targetKey, value;
      this.__accessors__ || (this.__accessors__ = {});
      if (this.__accessors__.hasOwnProperty(key)) {
        accessor = this.__accessors__[key];
        targetKey = accessor.targetKey;
        target = accessor.target;
        getterName = getGetterName(targetKey);
        if (target[getterName]) {
          value = target[getterName]();
        } else {
          value = target.get(targetKey);
        }
      } else if (this.hasOwnProperty(key)) {
        value = this[key];
      }
      return value;
    };

    MVCObject.prototype.set = function(key, value) {
      var accessor, setterName, target, targetKey;
      this.__accessors__ || (this.__accessors__ = {});
      if (this.__accessors__.hasOwnProperty(key)) {
        accessor = this.__accessors__[key];
        targetKey = accessor.targetKey;
        target = accessor.target;
        setterName = getSetterName(targetKey);
        if (target[setterName]) {
          return target[setterName](value);
        } else {
          return target.set(targetKey, value);
        }
      } else {
        this[key] = value;
        return triggerChange(this, key);
      }
    };

    MVCObject.prototype.changed = function() {};

    MVCObject.prototype.addListener = function(eventName, handler) {
      var _base;
      this.__events__ || (this.__events__ = {});
      (_base = this.__events__)[eventName] || (_base[eventName] = []);
      if (__indexOf.call(this.__events__[eventName], handler) >= 0) {
        return false;
      } else {
        this.__events__[eventName].push(handler);
        return true;
      }
    };

    MVCObject.prototype.notify = function(key) {
      var accessor, target, targetKey;
      this.__accessors__ || (this.__accessors__ = {});
      if (this.__accessors__.hasOwnProperty(key)) {
        accessor = this.__accessors__[key];
        targetKey = accessor.targetKey;
        target = accessor.target;
        return target.notify(targetKey);
      } else {
        return triggerChange(this, key);
      }
    };

    MVCObject.prototype.setValues = function(values) {
      var key, setterName, value, _results;
      _results = [];
      for (key in values) {
        value = values[key];
        setterName = getSetterName(key);
        if (this[setterName]) {
          _results.push(this[setterName](value));
        } else {
          _results.push(this.set(key, value));
        }
      }
      return _results;
    };

    MVCObject.prototype.bindTo = function(key, target, targetKey, noNotify) {
      var accessor, bindingObj, _base;
      targetKey || (targetKey = key);
      this.unbind(key);
      this.__accessors__ || (this.__accessors__ = {});
      target.__bindings__ || (target.__bindings__ = {});
      (_base = target.__bindings__)[targetKey] || (_base[targetKey] = {});
      bindingObj = {
        target: this,
        targetKey: key
      };
      accessor = {
        target: target,
        targetKey: targetKey,
        bindingObj: bindingObj
      };
      this.__accessors__[key] = accessor;
      target.__bindings__[targetKey][getUid(bindingObj)] = bindingObj;
      if (!noNotify) {
        return triggerChange(this, key);
      }
    };

    MVCObject.prototype.unbind = function(key) {
      var accessor, bindingObj, target, targetKey;
      this.__accessors__ || (this.__accessors__ = {});
      accessor = this.__accessors__[key];
      if (accessor) {
        bindingObj = accessor.bindingObj;
        target = accessor.target;
        targetKey = accessor.targetKey;
        if (bindingObj) {
          delete target.__bindings__[targetKey][getUid(bindingObj)];
        }
        this[key] = this.get(key);
        return delete this.__accessors__[key];
      }
    };

    MVCObject.prototype.unbindAll = function() {
      var key, _results;
      this.__accessors__ || (this.__accessors__ = {});
      _results = [];
      for (key in this.__accessors__) {
        _results.push(this.unbind(key));
      }
      return _results;
    };

    return MVCObject;

  })();

  if (typeof module !== "undefined" && module !== null) {
    module.exports = MVCObject;
  } else {
    window.MVCObject = MVCObject;
  }

}).call(this);
